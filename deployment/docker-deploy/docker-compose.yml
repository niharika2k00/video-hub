# ------------------------------------------------------------
# ðŸ›‘ Note: variables declared in environment will override env_file if same field exists
# .env file must be in same directory as docker-compose.yml
# ------------------------------------------------------------
name: videohub-deployment

services:
  main-application:
    container_name: main-application
    image: niharikadutta/main-application:v0.0.1
    restart: always
    ports:
      - "4040:4040"
    volumes: # bind mount
      - ./videos:/app/videos
      - ./config/main-application/application.yml:/app/config/application.yml:ro # host_path : container_path
      - ~/.aws:/root/.aws:ro # mount aws credentials
    command: ["--spring.config.location=file:/app/config/application.yml"]
    env_file:
      - .env
    networks:
      - videohub-network
      - prod_network

  processor-service-240p:
    container_name: processor-service-240p
    image: niharikadutta/processor-service:v0.0.1
    restart: always
    # profiles: ["240p"]
    volumes:
      - ./videos:/app/videos
      - ./config/processor-service/application.yml:/app/config/application.yml:ro
      - ~/.aws:/root/.aws:ro
    environment:
      - GROUP_ID=group1
      - RESOLUTION=240p
      - JAVA_OPTS=-DGROUP_ID=group1 -DRESOLUTION=240p -Dspring.devtools.livereload.enabled=false

      # This is recommended way to fix cgroup v2 memory issues when running the container on Raspberry Pi. Since we use a Docker image from my DockerHub, the env can be set either during image creation or in Docker Compose. Currently, it's commented out as it is set during image creation in processor-service > dev.dockerfile.

      # - JAVA_OPTS=-DGROUP_ID=group1 -DRESOLUTION=240p -Dspring.devtools.livereload.enabled=false -XX:-UseContainerSupport -XX:MaxRAMPercentage=75.0 -Djdk.util.jar.enableMultiRelease=false -XX:+DisableAttachMechanism -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djdk.attach.allowAttachSelf=false -Djdk.internal.platform.container.enabled=false -Dcom.sun.management.jmxremote=false -Djdk.internal.platform.cgroup.use.cgroups.v1=true

      # Kafka optimizations: Disable JMX and metrics collection to avoid cgroup v2 issues
      # - SPRING_KAFKA_CONSUMER_PROPERTIES_CLIENT_TELEMETRY_ENABLE=false
      # - SPRING_KAFKA_PRODUCER_PROPERTIES_CLIENT_TELEMETRY_ENABLE=false

      # DO NOT set env null - causes NullPointerException error on Raspberry Pi
      # - SPRING_KAFKA_CONSUMER_PROPERTIES_METRIC_REPORTERS=""
      # - SPRING_KAFKA_PRODUCER_PROPERTIES_METRIC_REPORTERS=""

    env_file:
      - .env
    networks:
      - videohub-network

  processor-service-360p:
    container_name: processor-service-360p
    image: niharikadutta/processor-service:v0.0.1
    restart: always
    # profiles: ["360p"]
    volumes:
      - ./videos:/app/videos
      - ./config/processor-service/application.yml:/app/config/application.yml:ro
      - ~/.aws:/root/.aws:ro
    environment:
      - GROUP_ID=group2
      - RESOLUTION=360p
      - JAVA_OPTS=-DGROUP_ID=group2 -DRESOLUTION=360p -Dspring.devtools.livereload.enabled=false
    env_file:
      - .env
    networks:
      - videohub-network

  processor-service-720p:
    container_name: processor-service-720p
    image: niharikadutta/processor-service:v0.0.1
    restart: always
    # profiles: ["720p"]
    volumes:
      - ./videos:/app/videos
      - ./config/processor-service/application.yml:/app/config/application.yml:ro
      - ~/.aws:/root/.aws:ro
    environment:
      - GROUP_ID=group3
      - RESOLUTION=720p
      - JAVA_OPTS=-DGROUP_ID=group3 -DRESOLUTION=720p -Dspring.devtools.livereload.enabled=false
    env_file:
      - .env
    networks:
      - videohub-network

  processor-service-480p:
    container_name: processor-service-480p
    image: niharikadutta/processor-service:v0.0.1
    restart: always
    # profiles: ["480p"]
    volumes:
      - ./videos:/app/videos
      - ./config/processor-service/application.yml:/app/config/application.yml:ro
      - ~/.aws:/root/.aws:ro
    environment:
      - GROUP_ID=group3
      - RESOLUTION=480p
      - JAVA_OPTS=-DGROUP_ID=group3 -DRESOLUTION=480p -Dspring.devtools.livereload.enabled=false
    env_file:
      - .env
    networks:
      - videohub-network

  processor-service-1080p:
    container_name: processor-service-1080p
    image: niharikadutta/processor-service:v0.0.1
    restart: always
    # profiles: ["1080p"]
    volumes:
      - ./videos:/app/videos
      - ./config/processor-service/application.yml:/app/config/application.yml:ro
      - ~/.aws:/root/.aws:ro
    environment:
      - GROUP_ID=group3
      - RESOLUTION=1080p
      - JAVA_OPTS=-DGROUP_ID=group3 -DRESOLUTION=1080p -Dspring.devtools.livereload.enabled=false
    env_file:
      - .env
    networks:
      - videohub-network

  email-service:
    container_name: email-service
    image: niharikadutta/email-service:v0.0.1
    restart: always
    volumes:
      - ./config/email-service/application.yml:/app/config/application.yml:ro
    # If email-service has an HTTP port too, publish a different host port
    # ports:
    #   - "4041:4040"

networks:
  videohub-network:
    driver: bridge
    external: true
  prod_network:
    driver: bridge
    external: true
# prod_network is the docker network that is connected to the cloudflare DNS servers exposed to the internet
